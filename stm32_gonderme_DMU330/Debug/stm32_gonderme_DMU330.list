
stm32_gonderme_DMU330.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d64  08003d64  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d64  08003d64  00004d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d6c  08003d6c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d6c  08003d6c  00004d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003d74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08003dd0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08003dd0  000052ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c84  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ba  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000527  00000000  00000000  0000ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002257a  00000000  00000000  0000f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009368  00000000  00000000  00031769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5173  00000000  00000000  0003aad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fc44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f8  00000000  00000000  0010fc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00111d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c04 	.word	0x08003c04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003c04 	.word	0x08003c04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Read_Adc.0>:
//    HAL_ADC_Stop(&hadc1);

//////*******************************************************

	void Read_Adc()
	{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	f8c7 c004 	str.w	ip, [r7, #4]
	    HAL_ADC_Start(&hadc1);  // ADC'yi başlat
 80005aa:	4844      	ldr	r0, [pc, #272]	@ (80006bc <Read_Adc.0+0x11c>)
 80005ac:	f000 fcb0 	bl	8000f10 <HAL_ADC_Start>

	    if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 80005b0:	4943      	ldr	r1, [pc, #268]	@ (80006c0 <Read_Adc.0+0x120>)
 80005b2:	4842      	ldr	r0, [pc, #264]	@ (80006bc <Read_Adc.0+0x11c>)
 80005b4:	f000 fd7e 	bl	80010b4 <HAL_ADC_PollForConversion>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d179      	bne.n	80006b2 <Read_Adc.0+0x112>
	    {
	    	amp1.TxData[0] = HAL_ADC_GetValue(&hadc1);
 80005be:	483f      	ldr	r0, [pc, #252]	@ (80006bc <Read_Adc.0+0x11c>)
 80005c0:	f000 fe03 	bl	80011ca <HAL_ADC_GetValue>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b3e      	ldr	r3, [pc, #248]	@ (80006c4 <Read_Adc.0+0x124>)
 80005ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//	    	HAL_ADC_GetValue(&hadc1);

//	        amp1.TxData[0]=0x48;
	        amp1.TxData[1]=0x00;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <Read_Adc.0+0x124>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	        amp1.TxData[2]=0x21;
 80005d6:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <Read_Adc.0+0x124>)
 80005d8:	2221      	movs	r2, #33	@ 0x21
 80005da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	        amp1.TxData[3]=0x01;
 80005de:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <Read_Adc.0+0x124>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	        amp1.TxData[4]=0x20;
 80005e6:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <Read_Adc.0+0x124>)
 80005e8:	2220      	movs	r2, #32
 80005ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	        amp1.TxData[5]=0x12;
 80005ee:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <Read_Adc.0+0x124>)
 80005f0:	2212      	movs	r2, #18
 80005f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	     	amp1.TxData[6]=0x00;
 80005f6:	4b33      	ldr	r3, [pc, #204]	@ (80006c4 <Read_Adc.0+0x124>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	        amp1.TxData[7]=0x30;
 80005fe:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <Read_Adc.0+0x124>)
 8000600:	2230      	movs	r2, #48	@ 0x30
 8000602:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	        HAL_CAN_AddTxMessage(&hcan1, &amp1.pTxHeader, amp1.TxData, &amp1.TxMailbox);
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <Read_Adc.0+0x128>)
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <Read_Adc.0+0x12c>)
 800060a:	492e      	ldr	r1, [pc, #184]	@ (80006c4 <Read_Adc.0+0x124>)
 800060c:	4830      	ldr	r0, [pc, #192]	@ (80006d0 <Read_Adc.0+0x130>)
 800060e:	f001 fa37 	bl	8001a80 <HAL_CAN_AddTxMessage>
	        HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fc14 	bl	8000e40 <HAL_Delay>

	        if(amp1.RxData[5] != 0xFF)
 8000618:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <Read_Adc.0+0x124>)
 800061a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800061e:	2bff      	cmp	r3, #255	@ 0xff
 8000620:	d021      	beq.n	8000666 <Read_Adc.0+0xc6>
	        {
	        sprintf(amp1_buff1, "%d", amp1.RxData[4]);
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <Read_Adc.0+0x124>)
 8000624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000628:	461a      	mov	r2, r3
 800062a:	492a      	ldr	r1, [pc, #168]	@ (80006d4 <Read_Adc.0+0x134>)
 800062c:	482a      	ldr	r0, [pc, #168]	@ (80006d8 <Read_Adc.0+0x138>)
 800062e:	f002 fe49 	bl	80032c4 <siprintf>
	        sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 8000632:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <Read_Adc.0+0x124>)
 8000634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000638:	461a      	mov	r2, r3
 800063a:	4926      	ldr	r1, [pc, #152]	@ (80006d4 <Read_Adc.0+0x134>)
 800063c:	4827      	ldr	r0, [pc, #156]	@ (80006dc <Read_Adc.0+0x13c>)
 800063e:	f002 fe41 	bl	80032c4 <siprintf>
	       	amp1.feedback_amp= atoi(amp1_buff2)*256 + atoi(amp1_buff1);  //atoi (ASCII to Integer), bir C kütüphane fonksiyonudur ve bir C string'ini (char dizisini) tamsayı (int) veri türüne dönüştürmek için kullanılır.
 8000642:	4826      	ldr	r0, [pc, #152]	@ (80006dc <Read_Adc.0+0x13c>)
 8000644:	f002 fdb6 	bl	80031b4 <atoi>
 8000648:	4603      	mov	r3, r0
 800064a:	b29b      	uxth	r3, r3
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	b29c      	uxth	r4, r3
 8000650:	4821      	ldr	r0, [pc, #132]	@ (80006d8 <Read_Adc.0+0x138>)
 8000652:	f002 fdaf 	bl	80031b4 <atoi>
 8000656:	4603      	mov	r3, r0
 8000658:	b29b      	uxth	r3, r3
 800065a:	4423      	add	r3, r4
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <Read_Adc.0+0x124>)
 8000660:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8000664:	e022      	b.n	80006ac <Read_Adc.0+0x10c>
	        }else{
	        sprintf(amp1_buff1, "%d", amp1.RxData[4]);
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <Read_Adc.0+0x124>)
 8000668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800066c:	461a      	mov	r2, r3
 800066e:	4919      	ldr	r1, [pc, #100]	@ (80006d4 <Read_Adc.0+0x134>)
 8000670:	4819      	ldr	r0, [pc, #100]	@ (80006d8 <Read_Adc.0+0x138>)
 8000672:	f002 fe27 	bl	80032c4 <siprintf>
	        sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <Read_Adc.0+0x124>)
 8000678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800067c:	461a      	mov	r2, r3
 800067e:	4915      	ldr	r1, [pc, #84]	@ (80006d4 <Read_Adc.0+0x134>)
 8000680:	4816      	ldr	r0, [pc, #88]	@ (80006dc <Read_Adc.0+0x13c>)
 8000682:	f002 fe1f 	bl	80032c4 <siprintf>
	        amp1.feedback_amp = 65536 - (atoi(amp1_buff2)*256 + atoi(amp1_buff1));
 8000686:	4815      	ldr	r0, [pc, #84]	@ (80006dc <Read_Adc.0+0x13c>)
 8000688:	f002 fd94 	bl	80031b4 <atoi>
 800068c:	4603      	mov	r3, r0
 800068e:	b29b      	uxth	r3, r3
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	b29c      	uxth	r4, r3
 8000694:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <Read_Adc.0+0x138>)
 8000696:	f002 fd8d 	bl	80031b4 <atoi>
 800069a:	4603      	mov	r3, r0
 800069c:	b29b      	uxth	r3, r3
 800069e:	4423      	add	r3, r4
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	425b      	negs	r3, r3
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <Read_Adc.0+0x124>)
 80006a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	        }
	        HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fbc7 	bl	8000e40 <HAL_Delay>

	    }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	000186a0 	.word	0x000186a0
 80006c4:	20000150 	.word	0x20000150
 80006c8:	2000018c 	.word	0x2000018c
 80006cc:	20000184 	.word	0x20000184
 80006d0:	200000e8 	.word	0x200000e8
 80006d4:	08003c1c 	.word	0x08003c1c
 80006d8:	20000110 	.word	0x20000110
 80006dc:	20000130 	.word	0x20000130

080006e0 <main>:
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
int main(void)
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80006ec:	f000 fb36 	bl	8000d5c <HAL_Init>
  SystemClock_Config();
 80006f0:	f000 f85a 	bl	80007a8 <SystemClock_Config>
  MX_GPIO_Init();
 80006f4:	f000 f95a 	bl	80009ac <MX_GPIO_Init>
  MX_CAN1_Init();
 80006f8:	f000 f922 	bl	8000940 <MX_CAN1_Init>
  MX_ADC1_Init();
 80006fc:	f000 f8c0 	bl	8000880 <MX_ADC1_Init>
	HAL_CAN_Start(&hcan1);
 8000700:	4826      	ldr	r0, [pc, #152]	@ (800079c <main+0xbc>)
 8000702:	f001 f979 	bl	80019f8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000706:	2102      	movs	r1, #2
 8000708:	4824      	ldr	r0, [pc, #144]	@ (800079c <main+0xbc>)
 800070a:	f001 fa89 	bl	8001c20 <HAL_CAN_ActivateNotification>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800070e:	2102      	movs	r1, #2
 8000710:	4822      	ldr	r0, [pc, #136]	@ (800079c <main+0xbc>)
 8000712:	f001 fa85 	bl	8001c20 <HAL_CAN_ActivateNotification>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <main+0x40>
      Error_Handler();
 800071c:	f000 f9b0 	bl	8000a80 <Error_Handler>
    sFilterConfig.FilterBank = 0;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <main+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <main+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <main+0xc0>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <main+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000 ;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <main+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh =0x0000; // 0xFFF0- 0x0150 dersek yine aynı şeyi yapar
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <main+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <main+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <main+0xc0>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <main+0xc0>)
 8000752:	2201      	movs	r2, #1
 8000754:	621a      	str	r2, [r3, #32]
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000756:	2102      	movs	r1, #2
 8000758:	4810      	ldr	r0, [pc, #64]	@ (800079c <main+0xbc>)
 800075a:	f001 fa61 	bl	8001c20 <HAL_CAN_ActivateNotification>
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800075e:	4910      	ldr	r1, [pc, #64]	@ (80007a0 <main+0xc0>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <main+0xbc>)
 8000762:	f001 f869 	bl	8001838 <HAL_CAN_ConfigFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <main+0x90>
      Error_Handler();
 800076c:	f000 f988 	bl	8000a80 <Error_Handler>
    amp1.pTxHeader.StdId= 0x0000;// 0x07E1
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <main+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
    amp1.pTxHeader.DLC=8;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <main+0xc4>)
 8000778:	2208      	movs	r2, #8
 800077a:	611a      	str	r2, [r3, #16]
    amp1.pTxHeader.IDE=CAN_ID_STD;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <main+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
    amp1.pTxHeader.RTR = CAN_RTR_DATA;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <main+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000788:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <main+0xc0>)
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <main+0xbc>)
 800078c:	f001 f854 	bl	8001838 <HAL_CAN_ConfigFilter>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  ADC_val = HAL_ADC_GetValue(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, ADC_val); // ADC dönüşümünü
	  Read_Adc();
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	469c      	mov	ip, r3
 8000794:	f7ff ff04 	bl	80005a0 <Read_Adc.0>
 8000798:	e7fa      	b.n	8000790 <main+0xb0>
 800079a:	bf00      	nop
 800079c:	200000e8 	.word	0x200000e8
 80007a0:	20000078 	.word	0x20000078
 80007a4:	20000150 	.word	0x20000150

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2234      	movs	r2, #52	@ 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fda4 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <SystemClock_Config+0xd0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <SystemClock_Config+0xd0>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	@ 0x40
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a22      	ldr	r2, [pc, #136]	@ (800087c <SystemClock_Config+0xd4>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000816:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800081c:	23a8      	movs	r3, #168	@ 0xa8
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fa21 	bl	8002c78 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800083c:	f000 f920 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000856:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2105      	movs	r1, #5
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fef4 	bl	800264c <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800086a:	f000 f909 	bl	8000a80 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	@ 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000892:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <MX_ADC1_Init+0xb4>)
 8000894:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <MX_ADC1_Init+0xb8>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000898:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_ADC1_Init+0xb4>)
 800089a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800089e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008c2:	4a1e      	ldr	r2, [pc, #120]	@ (800093c <MX_ADC1_Init+0xbc>)
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_ADC1_Init+0xb4>)
 80008e2:	f000 fad1 	bl	8000e88 <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008ec:	f000 f8c8 	bl	8000a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008f8:	2306      	movs	r3, #6
 80008fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_ADC1_Init+0xb4>)
 8000902:	f000 fc6f 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 f8b8 	bl	8000a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xb4>)
 800091e:	f000 fc61 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000928:	f000 f8aa 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000a0 	.word	0x200000a0
 8000938:	40012000 	.word	0x40012000
 800093c:	0f000001 	.word	0x0f000001

08000940 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <MX_CAN1_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800094c:	220c      	movs	r2, #12
 800094e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800095e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000962:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000966:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800096a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_CAN1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_CAN1_Init+0x64>)
 8000992:	f000 fe55 	bl	8001640 <HAL_CAN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 f870 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000e8 	.word	0x200000e8
 80009a8:	40006400 	.word	0x40006400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a26      	ldr	r2, [pc, #152]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009cc:	f043 0320 	orr.w	r3, r3, #32
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a18      	ldr	r2, [pc, #96]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_GPIO_Init+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f24e 0101 	movw	r1, #57345	@ 0xe001
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <MX_GPIO_Init+0xbc>)
 8000a3a:	f001 fded 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a3e:	f24e 0301 	movw	r3, #57345	@ 0xe001
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_GPIO_Init+0xbc>)
 8000a58:	f001 fc4a 	bl	80022f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021400 	.word	0x40021400

08000a6c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]


}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f001 fbce 	bl	800226c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <HAL_ADC_MspInit+0x7c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d127      	bne.n	8000b4e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a15      	ldr	r2, [pc, #84]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_ADC_MspInit+0x80>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_ADC_MspInit+0x84>)
 8000b4a:	f001 fbd1 	bl	80022f0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40012000 	.word	0x40012000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_CAN_MspInit+0x94>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d134      	bne.n	8000bf0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <HAL_CAN_MspInit+0x9c>)
 8000bdc:	f001 fb88 	bl	80022f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2100      	movs	r1, #0
 8000be4:	2014      	movs	r0, #20
 8000be6:	f001 fb4c 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bea:	2014      	movs	r0, #20
 8000bec:	f001 fb65 	bl	80022ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40006400 	.word	0x40006400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f8d1 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <CAN1_RX0_IRQHandler+0x10>)
 8000c6a:	f000 ffff 	bl	8001c6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000e8 	.word	0x200000e8

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f002 fb34 	bl	8003314 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	2000019c 	.word	0x2000019c
 8000ce0:	200002f0 	.word	0x200002f0

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f002 faf3 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fcd1 	bl	80006e0 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d4c:	08003d74 	.word	0x08003d74
  ldr r2, =_sbss
 8000d50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d54:	200002ec 	.word	0x200002ec

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f001 fa71 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe7c 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fa89 	bl	80022d6 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f001 fa51 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	200001a0 	.word	0x200001a0

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200001a0 	.word	0x200001a0

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e033      	b.n	8000f06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fe18 	bl	8000adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ece:	f023 0302 	bic.w	r3, r3, #2
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fab4 	bl	8001448 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef6:	e001      	b.n	8000efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Start+0x1a>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e0b2      	b.n	8001090 <HAL_ADC_Start+0x180>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d018      	beq.n	8000f72 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f50:	4b52      	ldr	r3, [pc, #328]	@ (800109c <HAL_ADC_Start+0x18c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a52      	ldr	r2, [pc, #328]	@ (80010a0 <HAL_ADC_Start+0x190>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9a      	lsrs	r2, r3, #18
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f64:	e002      	b.n	8000f6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f9      	bne.n	8000f66 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d17a      	bne.n	8001076 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000faa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fbe:	d106      	bne.n	8000fce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	f023 0206 	bic.w	r2, r3, #6
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fcc:	e002      	b.n	8000fd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <HAL_ADC_Start+0x194>)
 8000fde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d12a      	bne.n	800104c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80010a8 <HAL_ADC_Start+0x198>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d015      	beq.n	800102c <HAL_ADC_Start+0x11c>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <HAL_ADC_Start+0x19c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d105      	bne.n	8001016 <HAL_ADC_Start+0x106>
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_ADC_Start+0x194>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 031f 	and.w	r3, r3, #31
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00a      	beq.n	800102c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a25      	ldr	r2, [pc, #148]	@ (80010b0 <HAL_ADC_Start+0x1a0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d136      	bne.n	800108e <HAL_ADC_Start+0x17e>
 8001020:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_ADC_Start+0x194>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	d130      	bne.n	800108e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d129      	bne.n	800108e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	e020      	b.n	800108e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <HAL_ADC_Start+0x198>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d11b      	bne.n	800108e <HAL_ADC_Start+0x17e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d114      	bne.n	800108e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e00b      	b.n	800108e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000000 	.word	0x20000000
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	40012300 	.word	0x40012300
 80010a8:	40012000 	.word	0x40012000
 80010ac:	40012100 	.word	0x40012100
 80010b0:	40012200 	.word	0x40012200

080010b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d0:	d113      	bne.n	80010fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e0:	d10b      	bne.n	80010fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f043 0220 	orr.w	r2, r3, #32
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e063      	b.n	80011c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fa:	f7ff fe95 	bl	8000e28 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001100:	e021      	b.n	8001146 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d01d      	beq.n	8001146 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <HAL_ADC_PollForConversion+0x6c>
 8001110:	f7ff fe8a 	bl	8000e28 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d212      	bcs.n	8001146 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d00b      	beq.n	8001146 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f043 0204 	orr.w	r2, r3, #4
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e03d      	b.n	80011c2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	d1d6      	bne.n	8001102 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f06f 0212 	mvn.w	r2, #18
 800115c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d123      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d11f      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e113      	b.n	8001428 <HAL_ADC_ConfigChannel+0x244>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d925      	bls.n	800125c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68d9      	ldr	r1, [r3, #12]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68d9      	ldr	r1, [r3, #12]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	4603      	mov	r3, r0
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4403      	add	r3, r0
 800124e:	3b1e      	subs	r3, #30
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	e022      	b.n	80012a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	2207      	movs	r2, #7
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4403      	add	r3, r0
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d824      	bhi.n	80012f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b05      	subs	r3, #5
 80012bc:	221f      	movs	r2, #31
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b05      	subs	r3, #5
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f2:	e04c      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b23      	subs	r3, #35	@ 0x23
 800130e:	221f      	movs	r2, #31
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	@ 0x23
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
 8001344:	e023      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b41      	subs	r3, #65	@ 0x41
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	@ 0x41
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_ADC_ConfigChannel+0x250>)
 8001390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <HAL_ADC_ConfigChannel+0x254>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10f      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d8>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d10b      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001438 <HAL_ADC_ConfigChannel+0x254>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <HAL_ADC_ConfigChannel+0x258>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d003      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b11      	cmp	r3, #17
 80013d6:	d122      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_ADC_ConfigChannel+0x258>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d111      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_ADC_ConfigChannel+0x25c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_ADC_ConfigChannel+0x260>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9a      	lsrs	r2, r3, #18
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	10000012 	.word	0x10000012
 8001440:	20000000 	.word	0x20000000
 8001444:	431bde83 	.word	0x431bde83

08001448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001450:	4b79      	ldr	r3, [pc, #484]	@ (8001638 <ADC_Init+0x1f0>)
 8001452:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	431a      	orrs	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	021a      	lsls	r2, r3, #8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6899      	ldr	r1, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	4a58      	ldr	r2, [pc, #352]	@ (800163c <ADC_Init+0x1f4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6899      	ldr	r1, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e00f      	b.n	8001546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001544:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0202 	bic.w	r2, r2, #2
 8001554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	005a      	lsls	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01b      	beq.n	80015ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001582:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	3b01      	subs	r3, #1
 80015a0:	035a      	lsls	r2, r3, #13
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	e007      	b.n	80015bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	051a      	lsls	r2, r3, #20
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015fe:	025a      	lsls	r2, r3, #9
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	029a      	lsls	r2, r3, #10
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40012300 	.word	0x40012300
 800163c:	0f000001 	.word	0x0f000001

08001640 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0ed      	b.n	800182e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fa80 	bl	8000b64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fbd8 	bl	8000e28 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167a:	e012      	b.n	80016a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800167c:	f7ff fbd4 	bl	8000e28 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d90b      	bls.n	80016a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2205      	movs	r2, #5
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0c5      	b.n	800182e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0e5      	beq.n	800167c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0202 	bic.w	r2, r2, #2
 80016be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff fbb2 	bl	8000e28 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c6:	e012      	b.n	80016ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c8:	f7ff fbae 	bl	8000e28 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d90b      	bls.n	80016ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e09f      	b.n	800182e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e5      	bne.n	80016c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e007      	b.n	8001726 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7e5b      	ldrb	r3, [r3, #25]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e007      	b.n	8001750 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e9b      	ldrb	r3, [r3, #26]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0220 	bic.w	r2, r2, #32
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7edb      	ldrb	r3, [r3, #27]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0210 	bic.w	r2, r2, #16
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e007      	b.n	80017a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0210 	orr.w	r2, r2, #16
 80017a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7f1b      	ldrb	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0208 	orr.w	r2, r2, #8
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e007      	b.n	80017ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0208 	bic.w	r2, r2, #8
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7f5b      	ldrb	r3, [r3, #29]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0204 	orr.w	r2, r2, #4
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0204 	bic.w	r2, r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	ea42 0103 	orr.w	r1, r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001850:	7cfb      	ldrb	r3, [r7, #19]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d003      	beq.n	800185e <HAL_CAN_ConfigFilter+0x26>
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	2b02      	cmp	r3, #2
 800185a:	f040 80be 	bne.w	80019da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800185e:	4b65      	ldr	r3, [pc, #404]	@ (80019f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001860:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001878:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	431a      	orrs	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2201      	movs	r2, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d123      	bne.n	8001908 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3248      	adds	r2, #72	@ 0x48
 80018e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fe:	6979      	ldr	r1, [r7, #20]
 8001900:	3348      	adds	r3, #72	@ 0x48
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d122      	bne.n	8001956 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001930:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3248      	adds	r2, #72	@ 0x48
 8001936:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800194a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194c:	6979      	ldr	r1, [r7, #20]
 800194e:	3348      	adds	r3, #72	@ 0x48
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001970:	e007      	b.n	8001982 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800199c:	e007      	b.n	80019ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	431a      	orrs	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019cc:	f023 0201 	bic.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e006      	b.n	80019e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40006400 	.word	0x40006400

080019f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d12e      	bne.n	8001a6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff fa00 	bl	8000e28 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a2a:	e012      	b.n	8001a52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a2c:	f7ff f9fc 	bl	8000e28 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d90b      	bls.n	8001a52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2205      	movs	r2, #5
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e012      	b.n	8001a78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e5      	bne.n	8001a2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e006      	b.n	8001a78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d003      	beq.n	8001aac <HAL_CAN_AddTxMessage+0x2c>
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	f040 80ad 	bne.w	8001c06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8095 	beq.w	8001bf6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	0e1b      	lsrs	r3, r3, #24
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	6809      	ldr	r1, [r1, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3318      	adds	r3, #24
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00f      	b.n	8001b24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	440b      	add	r3, r1
 8001b22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	440b      	add	r3, r1
 8001b34:	3304      	adds	r3, #4
 8001b36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	7d1b      	ldrb	r3, [r3, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d111      	bne.n	8001b64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3318      	adds	r3, #24
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6811      	ldr	r1, [r2, #0]
 8001b54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	440b      	add	r3, r1
 8001b60:	3304      	adds	r3, #4
 8001b62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3307      	adds	r3, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	061a      	lsls	r2, r3, #24
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3306      	adds	r3, #6
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3305      	adds	r3, #5
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	3204      	adds	r2, #4
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4610      	mov	r0, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6811      	ldr	r1, [r2, #0]
 8001b8c:	ea43 0200 	orr.w	r2, r3, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	440b      	add	r3, r1
 8001b96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	061a      	lsls	r2, r3, #24
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	6811      	ldr	r1, [r2, #0]
 8001bc2:	ea43 0200 	orr.w	r2, r3, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	440b      	add	r3, r1
 8001bcc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3318      	adds	r3, #24
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	6811      	ldr	r1, [r2, #0]
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3318      	adds	r3, #24
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e00e      	b.n	8001c14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e006      	b.n	8001c14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3724      	adds	r7, #36	@ 0x24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d002      	beq.n	8001c3e <HAL_CAN_ActivateNotification+0x1e>
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d109      	bne.n	8001c52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6959      	ldr	r1, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d07c      	beq.n	8001dac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d023      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f983 	bl	8001fda <HAL_CAN_TxMailbox0CompleteCallback>
 8001cd4:	e016      	b.n	8001d04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce8:	e00c      	b.n	8001d04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfc:	e002      	b.n	8001d04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f989 	bl	8002016 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f963 	bl	8001fee <HAL_CAN_TxMailbox1CompleteCallback>
 8001d28:	e016      	b.n	8001d58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3c:	e00c      	b.n	8001d58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d50:	e002      	b.n	8001d58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f969 	bl	800202a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d024      	beq.n	8001dac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f943 	bl	8002002 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d7c:	e016      	b.n	8001dac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d90:	e00c      	b.n	8001dac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da4:	e002      	b.n	8001dac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f949 	bl	800203e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f930 	bl	8002052 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fe2e 	bl	8000a6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f912 	bl	800207a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8f9 	bl	8002066 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8fc 	bl	800208e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8f5 	bl	80020a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d07b      	beq.n	8001fba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d072      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d043      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03e      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f3a:	2b60      	cmp	r3, #96	@ 0x60
 8001f3c:	d02b      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x32a>
 8001f3e:	2b60      	cmp	r3, #96	@ 0x60
 8001f40:	d82e      	bhi.n	8001fa0 <HAL_CAN_IRQHandler+0x334>
 8001f42:	2b50      	cmp	r3, #80	@ 0x50
 8001f44:	d022      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x320>
 8001f46:	2b50      	cmp	r3, #80	@ 0x50
 8001f48:	d82a      	bhi.n	8001fa0 <HAL_CAN_IRQHandler+0x334>
 8001f4a:	2b40      	cmp	r3, #64	@ 0x40
 8001f4c:	d019      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x316>
 8001f4e:	2b40      	cmp	r3, #64	@ 0x40
 8001f50:	d826      	bhi.n	8001fa0 <HAL_CAN_IRQHandler+0x334>
 8001f52:	2b30      	cmp	r3, #48	@ 0x30
 8001f54:	d010      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x30c>
 8001f56:	2b30      	cmp	r3, #48	@ 0x30
 8001f58:	d822      	bhi.n	8001fa0 <HAL_CAN_IRQHandler+0x334>
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d002      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x2f8>
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d005      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f62:	e01d      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f6c:	e019      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f76:	e014      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f80:	e00f      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f8a:	e00a      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f94:	e005      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f9e:	e000      	b.n	8001fa2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fa0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001fb0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f872 	bl	80020b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	@ 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0b      	blt.n	800215a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4907      	ldr	r1, [pc, #28]	@ (8002168 <__NVIC_EnableIRQ+0x38>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	@ (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	@ (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	@ 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff8e 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff29 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff3e 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff8e 	bl	80021c0 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5d 	bl	800216c <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff31 	bl	8002130 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e165      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8154 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d005      	beq.n	8002342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	2b02      	cmp	r3, #2
 8002340:	d130      	bne.n	80023a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0201 	and.w	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d017      	beq.n	80023e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80ae 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b5d      	ldr	r3, [pc, #372]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	4a5c      	ldr	r2, [pc, #368]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002484:	6453      	str	r3, [r2, #68]	@ 0x44
 8002486:	4b5a      	ldr	r3, [pc, #360]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a58      	ldr	r2, [pc, #352]	@ (80025f4 <HAL_GPIO_Init+0x304>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4f      	ldr	r2, [pc, #316]	@ (80025f8 <HAL_GPIO_Init+0x308>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x21a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4e      	ldr	r2, [pc, #312]	@ (80025fc <HAL_GPIO_Init+0x30c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x216>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002600 <HAL_GPIO_Init+0x310>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x212>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002604 <HAL_GPIO_Init+0x314>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002608 <HAL_GPIO_Init+0x318>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x20a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4a      	ldr	r2, [pc, #296]	@ (800260c <HAL_GPIO_Init+0x31c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x206>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a49      	ldr	r2, [pc, #292]	@ (8002610 <HAL_GPIO_Init+0x320>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x202>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00c      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e00a      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e008      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fa:	2304      	movs	r3, #4
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fe:	2303      	movs	r3, #3
 8002500:	e004      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002502:	2302      	movs	r3, #2
 8002504:	e002      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_GPIO_Init+0x21c>
 800250a:	2300      	movs	r3, #0
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f002 0203 	and.w	r2, r2, #3
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	4093      	lsls	r3, r2
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800251c:	4935      	ldr	r1, [pc, #212]	@ (80025f4 <HAL_GPIO_Init+0x304>)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252a:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <HAL_GPIO_Init+0x324>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254e:	4a31      	ldr	r2, [pc, #196]	@ (8002614 <HAL_GPIO_Init+0x324>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002554:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_GPIO_Init+0x324>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002578:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <HAL_GPIO_Init+0x324>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257e:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <HAL_GPIO_Init+0x324>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_GPIO_Init+0x324>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002614 <HAL_GPIO_Init+0x324>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025cc:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <HAL_GPIO_Init+0x324>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	f67f ae96 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40021000 	.word	0x40021000
 800260c:	40021400 	.word	0x40021400
 8002610:	40021800 	.word	0x40021800
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0cc      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b68      	ldr	r3, [pc, #416]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d90c      	bls.n	8002688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a58      	ldr	r2, [pc, #352]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d044      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d119      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d003      	beq.n	800270a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b3f      	ldr	r3, [pc, #252]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e067      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4934      	ldr	r1, [pc, #208]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7fe fb74 	bl	8000e28 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe fb70 	bl	8000e28 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e04f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d20c      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	490a      	ldr	r1, [pc, #40]	@ (800280c <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	5ccb      	ldrb	r3, [r1, r3]
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fad4 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
 800280c:	08003c20 	.word	0x08003c20
 8002810:	20000000 	.word	0x20000000
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0ae      	sub	sp, #184	@ 0xb8
 800281e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800283e:	4bcb      	ldr	r3, [pc, #812]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b0c      	cmp	r3, #12
 8002848:	f200 8206 	bhi.w	8002c58 <HAL_RCC_GetSysClockFreq+0x440>
 800284c:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <HAL_RCC_GetSysClockFreq+0x3c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	08002c59 	.word	0x08002c59
 800285c:	08002c59 	.word	0x08002c59
 8002860:	08002c59 	.word	0x08002c59
 8002864:	08002891 	.word	0x08002891
 8002868:	08002c59 	.word	0x08002c59
 800286c:	08002c59 	.word	0x08002c59
 8002870:	08002c59 	.word	0x08002c59
 8002874:	08002899 	.word	0x08002899
 8002878:	08002c59 	.word	0x08002c59
 800287c:	08002c59 	.word	0x08002c59
 8002880:	08002c59 	.word	0x08002c59
 8002884:	08002a89 	.word	0x08002a89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4bb9      	ldr	r3, [pc, #740]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x358>)
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800288e:	e1e7      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002890:	4bb8      	ldr	r3, [pc, #736]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002896:	e1e3      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4bb4      	ldr	r3, [pc, #720]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a4:	4bb1      	ldr	r3, [pc, #708]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d071      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b0:	4bae      	ldr	r3, [pc, #696]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028d6:	4622      	mov	r2, r4
 80028d8:	462b      	mov	r3, r5
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	f04f 0100 	mov.w	r1, #0
 80028e2:	0159      	lsls	r1, r3, #5
 80028e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e8:	0150      	lsls	r0, r2, #5
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4621      	mov	r1, r4
 80028f0:	1a51      	subs	r1, r2, r1
 80028f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80028f4:	4629      	mov	r1, r5
 80028f6:	eb63 0301 	sbc.w	r3, r3, r1
 80028fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002908:	4649      	mov	r1, r9
 800290a:	018b      	lsls	r3, r1, #6
 800290c:	4641      	mov	r1, r8
 800290e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002912:	4641      	mov	r1, r8
 8002914:	018a      	lsls	r2, r1, #6
 8002916:	4641      	mov	r1, r8
 8002918:	1a51      	subs	r1, r2, r1
 800291a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800291c:	4649      	mov	r1, r9
 800291e:	eb63 0301 	sbc.w	r3, r3, r1
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002930:	4649      	mov	r1, r9
 8002932:	00cb      	lsls	r3, r1, #3
 8002934:	4641      	mov	r1, r8
 8002936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293a:	4641      	mov	r1, r8
 800293c:	00ca      	lsls	r2, r1, #3
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	4603      	mov	r3, r0
 8002944:	4622      	mov	r2, r4
 8002946:	189b      	adds	r3, r3, r2
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
 800294a:	462b      	mov	r3, r5
 800294c:	460a      	mov	r2, r1
 800294e:	eb42 0303 	adc.w	r3, r2, r3
 8002952:	637b      	str	r3, [r7, #52]	@ 0x34
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002960:	4629      	mov	r1, r5
 8002962:	024b      	lsls	r3, r1, #9
 8002964:	4621      	mov	r1, r4
 8002966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800296a:	4621      	mov	r1, r4
 800296c:	024a      	lsls	r2, r1, #9
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800297c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002980:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002984:	f7fd fc94 	bl	80002b0 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002992:	e067      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b75      	ldr	r3, [pc, #468]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029ae:	2300      	movs	r3, #0
 80029b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4621      	mov	r1, r4
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029d4:	4629      	mov	r1, r5
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029e8:	4649      	mov	r1, r9
 80029ea:	018b      	lsls	r3, r1, #6
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f2:	4641      	mov	r1, r8
 80029f4:	018a      	lsls	r2, r1, #6
 80029f6:	4641      	mov	r1, r8
 80029f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fc:	4649      	mov	r1, r9
 80029fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a16:	4692      	mov	sl, r2
 8002a18:	469b      	mov	fp, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	462b      	mov	r3, r5
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a50:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a56:	f7fd fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a64:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a86:	e0eb      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b38      	ldr	r3, [pc, #224]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a94:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d06b      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa0:	4b32      	ldr	r3, [pc, #200]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ab8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002abc:	4622      	mov	r2, r4
 8002abe:	462b      	mov	r3, r5
 8002ac0:	f04f 0000 	mov.w	r0, #0
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	0159      	lsls	r1, r3, #5
 8002aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ace:	0150      	lsls	r0, r2, #5
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	1a51      	subs	r1, r2, r1
 8002ad8:	61b9      	str	r1, [r7, #24]
 8002ada:	4629      	mov	r1, r5
 8002adc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002aee:	4659      	mov	r1, fp
 8002af0:	018b      	lsls	r3, r1, #6
 8002af2:	4651      	mov	r1, sl
 8002af4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af8:	4651      	mov	r1, sl
 8002afa:	018a      	lsls	r2, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ebb2 0801 	subs.w	r8, r2, r1
 8002b02:	4659      	mov	r1, fp
 8002b04:	eb63 0901 	sbc.w	r9, r3, r1
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1c:	4690      	mov	r8, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	eb18 0303 	adds.w	r3, r8, r3
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	462b      	mov	r3, r5
 8002b2a:	eb49 0303 	adc.w	r3, r9, r3
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	024b      	lsls	r3, r1, #9
 8002b40:	4621      	mov	r1, r4
 8002b42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b46:	4621      	mov	r1, r4
 8002b48:	024a      	lsls	r2, r1, #9
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b52:	2200      	movs	r2, #0
 8002b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b5c:	f7fd fba8 	bl	80002b0 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b6a:	e065      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x420>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	4611      	mov	r1, r2
 8002b84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b92:	4642      	mov	r2, r8
 8002b94:	464b      	mov	r3, r9
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4641      	mov	r1, r8
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4651      	mov	r1, sl
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	1a54      	subs	r4, r2, r1
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	eb63 0501 	sbc.w	r5, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	00eb      	lsls	r3, r5, #3
 8002be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bea:	00e2      	lsls	r2, r4, #3
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	18e3      	adds	r3, r4, r3
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	eb45 0303 	adc.w	r3, r5, r3
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	028b      	lsls	r3, r1, #10
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c14:	4621      	mov	r1, r4
 8002c16:	028a      	lsls	r2, r1, #10
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c20:	2200      	movs	r2, #0
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c2a:	f7fd fb41 	bl	80002b0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4613      	mov	r3, r2
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0f1b      	lsrs	r3, r3, #28
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c56:	e003      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	37b8      	adds	r7, #184	@ 0xb8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400

08002c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e28d      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8083 	beq.w	8002d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c98:	4b94      	ldr	r3, [pc, #592]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d019      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca4:	4b91      	ldr	r3, [pc, #580]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d112      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b84      	ldr	r3, [pc, #528]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x124>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d157      	bne.n	8002d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e25a      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x90>
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xcc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xb4>
 8002d12:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xcc>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b6c      	ldr	r3, [pc, #432]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f86c 	bl	8000e28 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe f868 	bl	8000e28 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e21f      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xdc>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f858 	bl	8000e28 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f854 	bl	8000e28 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e20b      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x104>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d06f      	beq.n	8002e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002daa:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db6:	4b4d      	ldr	r3, [pc, #308]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x186>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1d3      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4937      	ldr	r1, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe f801 	bl	8000e28 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fd fffd 	bl	8000e28 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1b4      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4925      	ldr	r1, [pc, #148]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd ffe0 	bl	8000e28 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fd ffdc 	bl	8000e28 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e193      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d036      	beq.n	8002f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fd ffc0 	bl	8000e28 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fd ffbc 	bl	8000e28 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e173      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x234>
 8002eca:	e01b      	b.n	8002f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fd ffa9 	bl	8000e28 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fd ffa5 	bl	8000e28 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e15c      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
 8002ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8097 	beq.w	8003040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b83      	ldr	r3, [pc, #524]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b7f      	ldr	r3, [pc, #508]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b7c      	ldr	r3, [pc, #496]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b79      	ldr	r3, [pc, #484]	@ (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	@ (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	@ (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd ff65 	bl	8000e28 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fd ff61 	bl	8000e28 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e118      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b6c      	ldr	r3, [pc, #432]	@ (8003128 <HAL_RCC_OscConfig+0x4b0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x31e>
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x358>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x340>
 8002f9e:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002faa:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x358>
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	4a59      	ldr	r2, [pc, #356]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc4:	4b57      	ldr	r3, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a56      	ldr	r2, [pc, #344]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fd ff26 	bl	8000e28 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fd ff22 	bl	8000e28 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0d7      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ee      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x368>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fd ff10 	bl	8000e28 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fd ff0c 	bl	8000e28 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0c1      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	4b40      	ldr	r3, [pc, #256]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	4a3a      	ldr	r2, [pc, #232]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80ad 	beq.w	80031a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b36      	ldr	r3, [pc, #216]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d145      	bne.n	80030ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b33      	ldr	r3, [pc, #204]	@ (800312c <HAL_RCC_OscConfig+0x4b4>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd fee0 	bl	8000e28 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fd fedc 	bl	8000e28 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e093      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	491b      	ldr	r1, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x4b4>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fd feb1 	bl	8000e28 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fead 	bl	8000e28 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e064      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x452>
 80030e8:	e05c      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_RCC_OscConfig+0x4b4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fe9a 	bl	8000e28 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fd fe96 	bl	8000e28 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04d      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x480>
 8003116:	e045      	b.n	80031a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e040      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
 8003124:	40023800 	.word	0x40023800
 8003128:	40007000 	.word	0x40007000
 800312c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003130:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <HAL_RCC_OscConfig+0x538>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d030      	beq.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d129      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d122      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	4293      	cmp	r3, r2
 800316a:	d119      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d10f      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <atoi>:
 80031b4:	220a      	movs	r2, #10
 80031b6:	2100      	movs	r1, #0
 80031b8:	f000 b87a 	b.w	80032b0 <strtol>

080031bc <_strtol_l.constprop.0>:
 80031bc:	2b24      	cmp	r3, #36	@ 0x24
 80031be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c2:	4686      	mov	lr, r0
 80031c4:	4690      	mov	r8, r2
 80031c6:	d801      	bhi.n	80031cc <_strtol_l.constprop.0+0x10>
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <_strtol_l.constprop.0+0x1e>
 80031cc:	f000 f8a2 	bl	8003314 <__errno>
 80031d0:	2316      	movs	r3, #22
 80031d2:	6003      	str	r3, [r0, #0]
 80031d4:	2000      	movs	r0, #0
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	4834      	ldr	r0, [pc, #208]	@ (80032ac <_strtol_l.constprop.0+0xf0>)
 80031dc:	460d      	mov	r5, r1
 80031de:	462a      	mov	r2, r5
 80031e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031e4:	5d06      	ldrb	r6, [r0, r4]
 80031e6:	f016 0608 	ands.w	r6, r6, #8
 80031ea:	d1f8      	bne.n	80031de <_strtol_l.constprop.0+0x22>
 80031ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80031ee:	d12d      	bne.n	800324c <_strtol_l.constprop.0+0x90>
 80031f0:	782c      	ldrb	r4, [r5, #0]
 80031f2:	2601      	movs	r6, #1
 80031f4:	1c95      	adds	r5, r2, #2
 80031f6:	f033 0210 	bics.w	r2, r3, #16
 80031fa:	d109      	bne.n	8003210 <_strtol_l.constprop.0+0x54>
 80031fc:	2c30      	cmp	r4, #48	@ 0x30
 80031fe:	d12a      	bne.n	8003256 <_strtol_l.constprop.0+0x9a>
 8003200:	782a      	ldrb	r2, [r5, #0]
 8003202:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003206:	2a58      	cmp	r2, #88	@ 0x58
 8003208:	d125      	bne.n	8003256 <_strtol_l.constprop.0+0x9a>
 800320a:	786c      	ldrb	r4, [r5, #1]
 800320c:	2310      	movs	r3, #16
 800320e:	3502      	adds	r5, #2
 8003210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003214:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003218:	2200      	movs	r2, #0
 800321a:	fbbc f9f3 	udiv	r9, ip, r3
 800321e:	4610      	mov	r0, r2
 8003220:	fb03 ca19 	mls	sl, r3, r9, ip
 8003224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003228:	2f09      	cmp	r7, #9
 800322a:	d81b      	bhi.n	8003264 <_strtol_l.constprop.0+0xa8>
 800322c:	463c      	mov	r4, r7
 800322e:	42a3      	cmp	r3, r4
 8003230:	dd27      	ble.n	8003282 <_strtol_l.constprop.0+0xc6>
 8003232:	1c57      	adds	r7, r2, #1
 8003234:	d007      	beq.n	8003246 <_strtol_l.constprop.0+0x8a>
 8003236:	4581      	cmp	r9, r0
 8003238:	d320      	bcc.n	800327c <_strtol_l.constprop.0+0xc0>
 800323a:	d101      	bne.n	8003240 <_strtol_l.constprop.0+0x84>
 800323c:	45a2      	cmp	sl, r4
 800323e:	db1d      	blt.n	800327c <_strtol_l.constprop.0+0xc0>
 8003240:	fb00 4003 	mla	r0, r0, r3, r4
 8003244:	2201      	movs	r2, #1
 8003246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800324a:	e7eb      	b.n	8003224 <_strtol_l.constprop.0+0x68>
 800324c:	2c2b      	cmp	r4, #43	@ 0x2b
 800324e:	bf04      	itt	eq
 8003250:	782c      	ldrbeq	r4, [r5, #0]
 8003252:	1c95      	addeq	r5, r2, #2
 8003254:	e7cf      	b.n	80031f6 <_strtol_l.constprop.0+0x3a>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1da      	bne.n	8003210 <_strtol_l.constprop.0+0x54>
 800325a:	2c30      	cmp	r4, #48	@ 0x30
 800325c:	bf0c      	ite	eq
 800325e:	2308      	moveq	r3, #8
 8003260:	230a      	movne	r3, #10
 8003262:	e7d5      	b.n	8003210 <_strtol_l.constprop.0+0x54>
 8003264:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003268:	2f19      	cmp	r7, #25
 800326a:	d801      	bhi.n	8003270 <_strtol_l.constprop.0+0xb4>
 800326c:	3c37      	subs	r4, #55	@ 0x37
 800326e:	e7de      	b.n	800322e <_strtol_l.constprop.0+0x72>
 8003270:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003274:	2f19      	cmp	r7, #25
 8003276:	d804      	bhi.n	8003282 <_strtol_l.constprop.0+0xc6>
 8003278:	3c57      	subs	r4, #87	@ 0x57
 800327a:	e7d8      	b.n	800322e <_strtol_l.constprop.0+0x72>
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	e7e1      	b.n	8003246 <_strtol_l.constprop.0+0x8a>
 8003282:	1c53      	adds	r3, r2, #1
 8003284:	d108      	bne.n	8003298 <_strtol_l.constprop.0+0xdc>
 8003286:	2322      	movs	r3, #34	@ 0x22
 8003288:	f8ce 3000 	str.w	r3, [lr]
 800328c:	4660      	mov	r0, ip
 800328e:	f1b8 0f00 	cmp.w	r8, #0
 8003292:	d0a0      	beq.n	80031d6 <_strtol_l.constprop.0+0x1a>
 8003294:	1e69      	subs	r1, r5, #1
 8003296:	e006      	b.n	80032a6 <_strtol_l.constprop.0+0xea>
 8003298:	b106      	cbz	r6, 800329c <_strtol_l.constprop.0+0xe0>
 800329a:	4240      	negs	r0, r0
 800329c:	f1b8 0f00 	cmp.w	r8, #0
 80032a0:	d099      	beq.n	80031d6 <_strtol_l.constprop.0+0x1a>
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	d1f6      	bne.n	8003294 <_strtol_l.constprop.0+0xd8>
 80032a6:	f8c8 1000 	str.w	r1, [r8]
 80032aa:	e794      	b.n	80031d6 <_strtol_l.constprop.0+0x1a>
 80032ac:	08003c31 	.word	0x08003c31

080032b0 <strtol>:
 80032b0:	4613      	mov	r3, r2
 80032b2:	460a      	mov	r2, r1
 80032b4:	4601      	mov	r1, r0
 80032b6:	4802      	ldr	r0, [pc, #8]	@ (80032c0 <strtol+0x10>)
 80032b8:	6800      	ldr	r0, [r0, #0]
 80032ba:	f7ff bf7f 	b.w	80031bc <_strtol_l.constprop.0>
 80032be:	bf00      	nop
 80032c0:	2000000c 	.word	0x2000000c

080032c4 <siprintf>:
 80032c4:	b40e      	push	{r1, r2, r3}
 80032c6:	b500      	push	{lr}
 80032c8:	b09c      	sub	sp, #112	@ 0x70
 80032ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80032cc:	9002      	str	r0, [sp, #8]
 80032ce:	9006      	str	r0, [sp, #24]
 80032d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80032d4:	4809      	ldr	r0, [pc, #36]	@ (80032fc <siprintf+0x38>)
 80032d6:	9107      	str	r1, [sp, #28]
 80032d8:	9104      	str	r1, [sp, #16]
 80032da:	4909      	ldr	r1, [pc, #36]	@ (8003300 <siprintf+0x3c>)
 80032dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e0:	9105      	str	r1, [sp, #20]
 80032e2:	6800      	ldr	r0, [r0, #0]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	a902      	add	r1, sp, #8
 80032e8:	f000 f994 	bl	8003614 <_svfiprintf_r>
 80032ec:	9b02      	ldr	r3, [sp, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	b01c      	add	sp, #112	@ 0x70
 80032f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032f8:	b003      	add	sp, #12
 80032fa:	4770      	bx	lr
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	ffff0208 	.word	0xffff0208

08003304 <memset>:
 8003304:	4402      	add	r2, r0
 8003306:	4603      	mov	r3, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <__errno>:
 8003314:	4b01      	ldr	r3, [pc, #4]	@ (800331c <__errno+0x8>)
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000000c 	.word	0x2000000c

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4d0d      	ldr	r5, [pc, #52]	@ (8003358 <__libc_init_array+0x38>)
 8003324:	4c0d      	ldr	r4, [pc, #52]	@ (800335c <__libc_init_array+0x3c>)
 8003326:	1b64      	subs	r4, r4, r5
 8003328:	10a4      	asrs	r4, r4, #2
 800332a:	2600      	movs	r6, #0
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	4d0b      	ldr	r5, [pc, #44]	@ (8003360 <__libc_init_array+0x40>)
 8003332:	4c0c      	ldr	r4, [pc, #48]	@ (8003364 <__libc_init_array+0x44>)
 8003334:	f000 fc66 	bl	8003c04 <_init>
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	2600      	movs	r6, #0
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	08003d6c 	.word	0x08003d6c
 800335c:	08003d6c 	.word	0x08003d6c
 8003360:	08003d6c 	.word	0x08003d6c
 8003364:	08003d70 	.word	0x08003d70

08003368 <__retarget_lock_acquire_recursive>:
 8003368:	4770      	bx	lr

0800336a <__retarget_lock_release_recursive>:
 800336a:	4770      	bx	lr

0800336c <_free_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4605      	mov	r5, r0
 8003370:	2900      	cmp	r1, #0
 8003372:	d041      	beq.n	80033f8 <_free_r+0x8c>
 8003374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003378:	1f0c      	subs	r4, r1, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfb8      	it	lt
 800337e:	18e4      	addlt	r4, r4, r3
 8003380:	f000 f8e0 	bl	8003544 <__malloc_lock>
 8003384:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <_free_r+0x90>)
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	b933      	cbnz	r3, 8003398 <_free_r+0x2c>
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	6014      	str	r4, [r2, #0]
 800338e:	4628      	mov	r0, r5
 8003390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003394:	f000 b8dc 	b.w	8003550 <__malloc_unlock>
 8003398:	42a3      	cmp	r3, r4
 800339a:	d908      	bls.n	80033ae <_free_r+0x42>
 800339c:	6820      	ldr	r0, [r4, #0]
 800339e:	1821      	adds	r1, r4, r0
 80033a0:	428b      	cmp	r3, r1
 80033a2:	bf01      	itttt	eq
 80033a4:	6819      	ldreq	r1, [r3, #0]
 80033a6:	685b      	ldreq	r3, [r3, #4]
 80033a8:	1809      	addeq	r1, r1, r0
 80033aa:	6021      	streq	r1, [r4, #0]
 80033ac:	e7ed      	b.n	800338a <_free_r+0x1e>
 80033ae:	461a      	mov	r2, r3
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	b10b      	cbz	r3, 80033b8 <_free_r+0x4c>
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	d9fa      	bls.n	80033ae <_free_r+0x42>
 80033b8:	6811      	ldr	r1, [r2, #0]
 80033ba:	1850      	adds	r0, r2, r1
 80033bc:	42a0      	cmp	r0, r4
 80033be:	d10b      	bne.n	80033d8 <_free_r+0x6c>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	4401      	add	r1, r0
 80033c4:	1850      	adds	r0, r2, r1
 80033c6:	4283      	cmp	r3, r0
 80033c8:	6011      	str	r1, [r2, #0]
 80033ca:	d1e0      	bne.n	800338e <_free_r+0x22>
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	6053      	str	r3, [r2, #4]
 80033d2:	4408      	add	r0, r1
 80033d4:	6010      	str	r0, [r2, #0]
 80033d6:	e7da      	b.n	800338e <_free_r+0x22>
 80033d8:	d902      	bls.n	80033e0 <_free_r+0x74>
 80033da:	230c      	movs	r3, #12
 80033dc:	602b      	str	r3, [r5, #0]
 80033de:	e7d6      	b.n	800338e <_free_r+0x22>
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	1821      	adds	r1, r4, r0
 80033e4:	428b      	cmp	r3, r1
 80033e6:	bf04      	itt	eq
 80033e8:	6819      	ldreq	r1, [r3, #0]
 80033ea:	685b      	ldreq	r3, [r3, #4]
 80033ec:	6063      	str	r3, [r4, #4]
 80033ee:	bf04      	itt	eq
 80033f0:	1809      	addeq	r1, r1, r0
 80033f2:	6021      	streq	r1, [r4, #0]
 80033f4:	6054      	str	r4, [r2, #4]
 80033f6:	e7ca      	b.n	800338e <_free_r+0x22>
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
 80033fa:	bf00      	nop
 80033fc:	200002e8 	.word	0x200002e8

08003400 <sbrk_aligned>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4e0f      	ldr	r6, [pc, #60]	@ (8003440 <sbrk_aligned+0x40>)
 8003404:	460c      	mov	r4, r1
 8003406:	6831      	ldr	r1, [r6, #0]
 8003408:	4605      	mov	r5, r0
 800340a:	b911      	cbnz	r1, 8003412 <sbrk_aligned+0x12>
 800340c:	f000 fba6 	bl	8003b5c <_sbrk_r>
 8003410:	6030      	str	r0, [r6, #0]
 8003412:	4621      	mov	r1, r4
 8003414:	4628      	mov	r0, r5
 8003416:	f000 fba1 	bl	8003b5c <_sbrk_r>
 800341a:	1c43      	adds	r3, r0, #1
 800341c:	d103      	bne.n	8003426 <sbrk_aligned+0x26>
 800341e:	f04f 34ff 	mov.w	r4, #4294967295
 8003422:	4620      	mov	r0, r4
 8003424:	bd70      	pop	{r4, r5, r6, pc}
 8003426:	1cc4      	adds	r4, r0, #3
 8003428:	f024 0403 	bic.w	r4, r4, #3
 800342c:	42a0      	cmp	r0, r4
 800342e:	d0f8      	beq.n	8003422 <sbrk_aligned+0x22>
 8003430:	1a21      	subs	r1, r4, r0
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fb92 	bl	8003b5c <_sbrk_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d1f2      	bne.n	8003422 <sbrk_aligned+0x22>
 800343c:	e7ef      	b.n	800341e <sbrk_aligned+0x1e>
 800343e:	bf00      	nop
 8003440:	200002e4 	.word	0x200002e4

08003444 <_malloc_r>:
 8003444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003448:	1ccd      	adds	r5, r1, #3
 800344a:	f025 0503 	bic.w	r5, r5, #3
 800344e:	3508      	adds	r5, #8
 8003450:	2d0c      	cmp	r5, #12
 8003452:	bf38      	it	cc
 8003454:	250c      	movcc	r5, #12
 8003456:	2d00      	cmp	r5, #0
 8003458:	4606      	mov	r6, r0
 800345a:	db01      	blt.n	8003460 <_malloc_r+0x1c>
 800345c:	42a9      	cmp	r1, r5
 800345e:	d904      	bls.n	800346a <_malloc_r+0x26>
 8003460:	230c      	movs	r3, #12
 8003462:	6033      	str	r3, [r6, #0]
 8003464:	2000      	movs	r0, #0
 8003466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003540 <_malloc_r+0xfc>
 800346e:	f000 f869 	bl	8003544 <__malloc_lock>
 8003472:	f8d8 3000 	ldr.w	r3, [r8]
 8003476:	461c      	mov	r4, r3
 8003478:	bb44      	cbnz	r4, 80034cc <_malloc_r+0x88>
 800347a:	4629      	mov	r1, r5
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff ffbf 	bl	8003400 <sbrk_aligned>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	4604      	mov	r4, r0
 8003486:	d158      	bne.n	800353a <_malloc_r+0xf6>
 8003488:	f8d8 4000 	ldr.w	r4, [r8]
 800348c:	4627      	mov	r7, r4
 800348e:	2f00      	cmp	r7, #0
 8003490:	d143      	bne.n	800351a <_malloc_r+0xd6>
 8003492:	2c00      	cmp	r4, #0
 8003494:	d04b      	beq.n	800352e <_malloc_r+0xea>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	4639      	mov	r1, r7
 800349a:	4630      	mov	r0, r6
 800349c:	eb04 0903 	add.w	r9, r4, r3
 80034a0:	f000 fb5c 	bl	8003b5c <_sbrk_r>
 80034a4:	4581      	cmp	r9, r0
 80034a6:	d142      	bne.n	800352e <_malloc_r+0xea>
 80034a8:	6821      	ldr	r1, [r4, #0]
 80034aa:	1a6d      	subs	r5, r5, r1
 80034ac:	4629      	mov	r1, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff ffa6 	bl	8003400 <sbrk_aligned>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d03a      	beq.n	800352e <_malloc_r+0xea>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	442b      	add	r3, r5
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	f8d8 3000 	ldr.w	r3, [r8]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	bb62      	cbnz	r2, 8003520 <_malloc_r+0xdc>
 80034c6:	f8c8 7000 	str.w	r7, [r8]
 80034ca:	e00f      	b.n	80034ec <_malloc_r+0xa8>
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	1b52      	subs	r2, r2, r5
 80034d0:	d420      	bmi.n	8003514 <_malloc_r+0xd0>
 80034d2:	2a0b      	cmp	r2, #11
 80034d4:	d917      	bls.n	8003506 <_malloc_r+0xc2>
 80034d6:	1961      	adds	r1, r4, r5
 80034d8:	42a3      	cmp	r3, r4
 80034da:	6025      	str	r5, [r4, #0]
 80034dc:	bf18      	it	ne
 80034de:	6059      	strne	r1, [r3, #4]
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	bf08      	it	eq
 80034e4:	f8c8 1000 	streq.w	r1, [r8]
 80034e8:	5162      	str	r2, [r4, r5]
 80034ea:	604b      	str	r3, [r1, #4]
 80034ec:	4630      	mov	r0, r6
 80034ee:	f000 f82f 	bl	8003550 <__malloc_unlock>
 80034f2:	f104 000b 	add.w	r0, r4, #11
 80034f6:	1d23      	adds	r3, r4, #4
 80034f8:	f020 0007 	bic.w	r0, r0, #7
 80034fc:	1ac2      	subs	r2, r0, r3
 80034fe:	bf1c      	itt	ne
 8003500:	1a1b      	subne	r3, r3, r0
 8003502:	50a3      	strne	r3, [r4, r2]
 8003504:	e7af      	b.n	8003466 <_malloc_r+0x22>
 8003506:	6862      	ldr	r2, [r4, #4]
 8003508:	42a3      	cmp	r3, r4
 800350a:	bf0c      	ite	eq
 800350c:	f8c8 2000 	streq.w	r2, [r8]
 8003510:	605a      	strne	r2, [r3, #4]
 8003512:	e7eb      	b.n	80034ec <_malloc_r+0xa8>
 8003514:	4623      	mov	r3, r4
 8003516:	6864      	ldr	r4, [r4, #4]
 8003518:	e7ae      	b.n	8003478 <_malloc_r+0x34>
 800351a:	463c      	mov	r4, r7
 800351c:	687f      	ldr	r7, [r7, #4]
 800351e:	e7b6      	b.n	800348e <_malloc_r+0x4a>
 8003520:	461a      	mov	r2, r3
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	42a3      	cmp	r3, r4
 8003526:	d1fb      	bne.n	8003520 <_malloc_r+0xdc>
 8003528:	2300      	movs	r3, #0
 800352a:	6053      	str	r3, [r2, #4]
 800352c:	e7de      	b.n	80034ec <_malloc_r+0xa8>
 800352e:	230c      	movs	r3, #12
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	4630      	mov	r0, r6
 8003534:	f000 f80c 	bl	8003550 <__malloc_unlock>
 8003538:	e794      	b.n	8003464 <_malloc_r+0x20>
 800353a:	6005      	str	r5, [r0, #0]
 800353c:	e7d6      	b.n	80034ec <_malloc_r+0xa8>
 800353e:	bf00      	nop
 8003540:	200002e8 	.word	0x200002e8

08003544 <__malloc_lock>:
 8003544:	4801      	ldr	r0, [pc, #4]	@ (800354c <__malloc_lock+0x8>)
 8003546:	f7ff bf0f 	b.w	8003368 <__retarget_lock_acquire_recursive>
 800354a:	bf00      	nop
 800354c:	200002e0 	.word	0x200002e0

08003550 <__malloc_unlock>:
 8003550:	4801      	ldr	r0, [pc, #4]	@ (8003558 <__malloc_unlock+0x8>)
 8003552:	f7ff bf0a 	b.w	800336a <__retarget_lock_release_recursive>
 8003556:	bf00      	nop
 8003558:	200002e0 	.word	0x200002e0

0800355c <__ssputs_r>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	688e      	ldr	r6, [r1, #8]
 8003562:	461f      	mov	r7, r3
 8003564:	42be      	cmp	r6, r7
 8003566:	680b      	ldr	r3, [r1, #0]
 8003568:	4682      	mov	sl, r0
 800356a:	460c      	mov	r4, r1
 800356c:	4690      	mov	r8, r2
 800356e:	d82d      	bhi.n	80035cc <__ssputs_r+0x70>
 8003570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003574:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003578:	d026      	beq.n	80035c8 <__ssputs_r+0x6c>
 800357a:	6965      	ldr	r5, [r4, #20]
 800357c:	6909      	ldr	r1, [r1, #16]
 800357e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003582:	eba3 0901 	sub.w	r9, r3, r1
 8003586:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800358a:	1c7b      	adds	r3, r7, #1
 800358c:	444b      	add	r3, r9
 800358e:	106d      	asrs	r5, r5, #1
 8003590:	429d      	cmp	r5, r3
 8003592:	bf38      	it	cc
 8003594:	461d      	movcc	r5, r3
 8003596:	0553      	lsls	r3, r2, #21
 8003598:	d527      	bpl.n	80035ea <__ssputs_r+0x8e>
 800359a:	4629      	mov	r1, r5
 800359c:	f7ff ff52 	bl	8003444 <_malloc_r>
 80035a0:	4606      	mov	r6, r0
 80035a2:	b360      	cbz	r0, 80035fe <__ssputs_r+0xa2>
 80035a4:	6921      	ldr	r1, [r4, #16]
 80035a6:	464a      	mov	r2, r9
 80035a8:	f000 fae8 	bl	8003b7c <memcpy>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	6126      	str	r6, [r4, #16]
 80035ba:	6165      	str	r5, [r4, #20]
 80035bc:	444e      	add	r6, r9
 80035be:	eba5 0509 	sub.w	r5, r5, r9
 80035c2:	6026      	str	r6, [r4, #0]
 80035c4:	60a5      	str	r5, [r4, #8]
 80035c6:	463e      	mov	r6, r7
 80035c8:	42be      	cmp	r6, r7
 80035ca:	d900      	bls.n	80035ce <__ssputs_r+0x72>
 80035cc:	463e      	mov	r6, r7
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	4632      	mov	r2, r6
 80035d2:	4641      	mov	r1, r8
 80035d4:	f000 faa8 	bl	8003b28 <memmove>
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	1b9b      	subs	r3, r3, r6
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	4433      	add	r3, r6
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	2000      	movs	r0, #0
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	462a      	mov	r2, r5
 80035ec:	f000 fad4 	bl	8003b98 <_realloc_r>
 80035f0:	4606      	mov	r6, r0
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d1e0      	bne.n	80035b8 <__ssputs_r+0x5c>
 80035f6:	6921      	ldr	r1, [r4, #16]
 80035f8:	4650      	mov	r0, sl
 80035fa:	f7ff feb7 	bl	800336c <_free_r>
 80035fe:	230c      	movs	r3, #12
 8003600:	f8ca 3000 	str.w	r3, [sl]
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360a:	81a3      	strh	r3, [r4, #12]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	e7e9      	b.n	80035e6 <__ssputs_r+0x8a>
	...

08003614 <_svfiprintf_r>:
 8003614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003618:	4698      	mov	r8, r3
 800361a:	898b      	ldrh	r3, [r1, #12]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	b09d      	sub	sp, #116	@ 0x74
 8003620:	4607      	mov	r7, r0
 8003622:	460d      	mov	r5, r1
 8003624:	4614      	mov	r4, r2
 8003626:	d510      	bpl.n	800364a <_svfiprintf_r+0x36>
 8003628:	690b      	ldr	r3, [r1, #16]
 800362a:	b973      	cbnz	r3, 800364a <_svfiprintf_r+0x36>
 800362c:	2140      	movs	r1, #64	@ 0x40
 800362e:	f7ff ff09 	bl	8003444 <_malloc_r>
 8003632:	6028      	str	r0, [r5, #0]
 8003634:	6128      	str	r0, [r5, #16]
 8003636:	b930      	cbnz	r0, 8003646 <_svfiprintf_r+0x32>
 8003638:	230c      	movs	r3, #12
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	b01d      	add	sp, #116	@ 0x74
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	2340      	movs	r3, #64	@ 0x40
 8003648:	616b      	str	r3, [r5, #20]
 800364a:	2300      	movs	r3, #0
 800364c:	9309      	str	r3, [sp, #36]	@ 0x24
 800364e:	2320      	movs	r3, #32
 8003650:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003654:	f8cd 800c 	str.w	r8, [sp, #12]
 8003658:	2330      	movs	r3, #48	@ 0x30
 800365a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80037f8 <_svfiprintf_r+0x1e4>
 800365e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003662:	f04f 0901 	mov.w	r9, #1
 8003666:	4623      	mov	r3, r4
 8003668:	469a      	mov	sl, r3
 800366a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800366e:	b10a      	cbz	r2, 8003674 <_svfiprintf_r+0x60>
 8003670:	2a25      	cmp	r2, #37	@ 0x25
 8003672:	d1f9      	bne.n	8003668 <_svfiprintf_r+0x54>
 8003674:	ebba 0b04 	subs.w	fp, sl, r4
 8003678:	d00b      	beq.n	8003692 <_svfiprintf_r+0x7e>
 800367a:	465b      	mov	r3, fp
 800367c:	4622      	mov	r2, r4
 800367e:	4629      	mov	r1, r5
 8003680:	4638      	mov	r0, r7
 8003682:	f7ff ff6b 	bl	800355c <__ssputs_r>
 8003686:	3001      	adds	r0, #1
 8003688:	f000 80a7 	beq.w	80037da <_svfiprintf_r+0x1c6>
 800368c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800368e:	445a      	add	r2, fp
 8003690:	9209      	str	r2, [sp, #36]	@ 0x24
 8003692:	f89a 3000 	ldrb.w	r3, [sl]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 809f 	beq.w	80037da <_svfiprintf_r+0x1c6>
 800369c:	2300      	movs	r3, #0
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
 80036a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036a6:	f10a 0a01 	add.w	sl, sl, #1
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	9307      	str	r3, [sp, #28]
 80036ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80036b4:	4654      	mov	r4, sl
 80036b6:	2205      	movs	r2, #5
 80036b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036bc:	484e      	ldr	r0, [pc, #312]	@ (80037f8 <_svfiprintf_r+0x1e4>)
 80036be:	f7fc fda7 	bl	8000210 <memchr>
 80036c2:	9a04      	ldr	r2, [sp, #16]
 80036c4:	b9d8      	cbnz	r0, 80036fe <_svfiprintf_r+0xea>
 80036c6:	06d0      	lsls	r0, r2, #27
 80036c8:	bf44      	itt	mi
 80036ca:	2320      	movmi	r3, #32
 80036cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036d0:	0711      	lsls	r1, r2, #28
 80036d2:	bf44      	itt	mi
 80036d4:	232b      	movmi	r3, #43	@ 0x2b
 80036d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036da:	f89a 3000 	ldrb.w	r3, [sl]
 80036de:	2b2a      	cmp	r3, #42	@ 0x2a
 80036e0:	d015      	beq.n	800370e <_svfiprintf_r+0xfa>
 80036e2:	9a07      	ldr	r2, [sp, #28]
 80036e4:	4654      	mov	r4, sl
 80036e6:	2000      	movs	r0, #0
 80036e8:	f04f 0c0a 	mov.w	ip, #10
 80036ec:	4621      	mov	r1, r4
 80036ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036f2:	3b30      	subs	r3, #48	@ 0x30
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d94b      	bls.n	8003790 <_svfiprintf_r+0x17c>
 80036f8:	b1b0      	cbz	r0, 8003728 <_svfiprintf_r+0x114>
 80036fa:	9207      	str	r2, [sp, #28]
 80036fc:	e014      	b.n	8003728 <_svfiprintf_r+0x114>
 80036fe:	eba0 0308 	sub.w	r3, r0, r8
 8003702:	fa09 f303 	lsl.w	r3, r9, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	46a2      	mov	sl, r4
 800370c:	e7d2      	b.n	80036b4 <_svfiprintf_r+0xa0>
 800370e:	9b03      	ldr	r3, [sp, #12]
 8003710:	1d19      	adds	r1, r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	9103      	str	r1, [sp, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	bfbb      	ittet	lt
 800371a:	425b      	neglt	r3, r3
 800371c:	f042 0202 	orrlt.w	r2, r2, #2
 8003720:	9307      	strge	r3, [sp, #28]
 8003722:	9307      	strlt	r3, [sp, #28]
 8003724:	bfb8      	it	lt
 8003726:	9204      	strlt	r2, [sp, #16]
 8003728:	7823      	ldrb	r3, [r4, #0]
 800372a:	2b2e      	cmp	r3, #46	@ 0x2e
 800372c:	d10a      	bne.n	8003744 <_svfiprintf_r+0x130>
 800372e:	7863      	ldrb	r3, [r4, #1]
 8003730:	2b2a      	cmp	r3, #42	@ 0x2a
 8003732:	d132      	bne.n	800379a <_svfiprintf_r+0x186>
 8003734:	9b03      	ldr	r3, [sp, #12]
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	9203      	str	r2, [sp, #12]
 800373c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003740:	3402      	adds	r4, #2
 8003742:	9305      	str	r3, [sp, #20]
 8003744:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003808 <_svfiprintf_r+0x1f4>
 8003748:	7821      	ldrb	r1, [r4, #0]
 800374a:	2203      	movs	r2, #3
 800374c:	4650      	mov	r0, sl
 800374e:	f7fc fd5f 	bl	8000210 <memchr>
 8003752:	b138      	cbz	r0, 8003764 <_svfiprintf_r+0x150>
 8003754:	9b04      	ldr	r3, [sp, #16]
 8003756:	eba0 000a 	sub.w	r0, r0, sl
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	4082      	lsls	r2, r0
 800375e:	4313      	orrs	r3, r2
 8003760:	3401      	adds	r4, #1
 8003762:	9304      	str	r3, [sp, #16]
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	4824      	ldr	r0, [pc, #144]	@ (80037fc <_svfiprintf_r+0x1e8>)
 800376a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800376e:	2206      	movs	r2, #6
 8003770:	f7fc fd4e 	bl	8000210 <memchr>
 8003774:	2800      	cmp	r0, #0
 8003776:	d036      	beq.n	80037e6 <_svfiprintf_r+0x1d2>
 8003778:	4b21      	ldr	r3, [pc, #132]	@ (8003800 <_svfiprintf_r+0x1ec>)
 800377a:	bb1b      	cbnz	r3, 80037c4 <_svfiprintf_r+0x1b0>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3307      	adds	r3, #7
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	3308      	adds	r3, #8
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800378a:	4433      	add	r3, r6
 800378c:	9309      	str	r3, [sp, #36]	@ 0x24
 800378e:	e76a      	b.n	8003666 <_svfiprintf_r+0x52>
 8003790:	fb0c 3202 	mla	r2, ip, r2, r3
 8003794:	460c      	mov	r4, r1
 8003796:	2001      	movs	r0, #1
 8003798:	e7a8      	b.n	80036ec <_svfiprintf_r+0xd8>
 800379a:	2300      	movs	r3, #0
 800379c:	3401      	adds	r4, #1
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f04f 0c0a 	mov.w	ip, #10
 80037a6:	4620      	mov	r0, r4
 80037a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ac:	3a30      	subs	r2, #48	@ 0x30
 80037ae:	2a09      	cmp	r2, #9
 80037b0:	d903      	bls.n	80037ba <_svfiprintf_r+0x1a6>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c6      	beq.n	8003744 <_svfiprintf_r+0x130>
 80037b6:	9105      	str	r1, [sp, #20]
 80037b8:	e7c4      	b.n	8003744 <_svfiprintf_r+0x130>
 80037ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80037be:	4604      	mov	r4, r0
 80037c0:	2301      	movs	r3, #1
 80037c2:	e7f0      	b.n	80037a6 <_svfiprintf_r+0x192>
 80037c4:	ab03      	add	r3, sp, #12
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	462a      	mov	r2, r5
 80037ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003804 <_svfiprintf_r+0x1f0>)
 80037cc:	a904      	add	r1, sp, #16
 80037ce:	4638      	mov	r0, r7
 80037d0:	f3af 8000 	nop.w
 80037d4:	1c42      	adds	r2, r0, #1
 80037d6:	4606      	mov	r6, r0
 80037d8:	d1d6      	bne.n	8003788 <_svfiprintf_r+0x174>
 80037da:	89ab      	ldrh	r3, [r5, #12]
 80037dc:	065b      	lsls	r3, r3, #25
 80037de:	f53f af2d 	bmi.w	800363c <_svfiprintf_r+0x28>
 80037e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037e4:	e72c      	b.n	8003640 <_svfiprintf_r+0x2c>
 80037e6:	ab03      	add	r3, sp, #12
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	462a      	mov	r2, r5
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <_svfiprintf_r+0x1f0>)
 80037ee:	a904      	add	r1, sp, #16
 80037f0:	4638      	mov	r0, r7
 80037f2:	f000 f879 	bl	80038e8 <_printf_i>
 80037f6:	e7ed      	b.n	80037d4 <_svfiprintf_r+0x1c0>
 80037f8:	08003d31 	.word	0x08003d31
 80037fc:	08003d3b 	.word	0x08003d3b
 8003800:	00000000 	.word	0x00000000
 8003804:	0800355d 	.word	0x0800355d
 8003808:	08003d37 	.word	0x08003d37

0800380c <_printf_common>:
 800380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	4616      	mov	r6, r2
 8003812:	4698      	mov	r8, r3
 8003814:	688a      	ldr	r2, [r1, #8]
 8003816:	690b      	ldr	r3, [r1, #16]
 8003818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800381c:	4293      	cmp	r3, r2
 800381e:	bfb8      	it	lt
 8003820:	4613      	movlt	r3, r2
 8003822:	6033      	str	r3, [r6, #0]
 8003824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003828:	4607      	mov	r7, r0
 800382a:	460c      	mov	r4, r1
 800382c:	b10a      	cbz	r2, 8003832 <_printf_common+0x26>
 800382e:	3301      	adds	r3, #1
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	0699      	lsls	r1, r3, #26
 8003836:	bf42      	ittt	mi
 8003838:	6833      	ldrmi	r3, [r6, #0]
 800383a:	3302      	addmi	r3, #2
 800383c:	6033      	strmi	r3, [r6, #0]
 800383e:	6825      	ldr	r5, [r4, #0]
 8003840:	f015 0506 	ands.w	r5, r5, #6
 8003844:	d106      	bne.n	8003854 <_printf_common+0x48>
 8003846:	f104 0a19 	add.w	sl, r4, #25
 800384a:	68e3      	ldr	r3, [r4, #12]
 800384c:	6832      	ldr	r2, [r6, #0]
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	42ab      	cmp	r3, r5
 8003852:	dc26      	bgt.n	80038a2 <_printf_common+0x96>
 8003854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	3b00      	subs	r3, #0
 800385c:	bf18      	it	ne
 800385e:	2301      	movne	r3, #1
 8003860:	0692      	lsls	r2, r2, #26
 8003862:	d42b      	bmi.n	80038bc <_printf_common+0xb0>
 8003864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003868:	4641      	mov	r1, r8
 800386a:	4638      	mov	r0, r7
 800386c:	47c8      	blx	r9
 800386e:	3001      	adds	r0, #1
 8003870:	d01e      	beq.n	80038b0 <_printf_common+0xa4>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	6922      	ldr	r2, [r4, #16]
 8003876:	f003 0306 	and.w	r3, r3, #6
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf02      	ittt	eq
 800387e:	68e5      	ldreq	r5, [r4, #12]
 8003880:	6833      	ldreq	r3, [r6, #0]
 8003882:	1aed      	subeq	r5, r5, r3
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	bf0c      	ite	eq
 8003888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800388c:	2500      	movne	r5, #0
 800388e:	4293      	cmp	r3, r2
 8003890:	bfc4      	itt	gt
 8003892:	1a9b      	subgt	r3, r3, r2
 8003894:	18ed      	addgt	r5, r5, r3
 8003896:	2600      	movs	r6, #0
 8003898:	341a      	adds	r4, #26
 800389a:	42b5      	cmp	r5, r6
 800389c:	d11a      	bne.n	80038d4 <_printf_common+0xc8>
 800389e:	2000      	movs	r0, #0
 80038a0:	e008      	b.n	80038b4 <_printf_common+0xa8>
 80038a2:	2301      	movs	r3, #1
 80038a4:	4652      	mov	r2, sl
 80038a6:	4641      	mov	r1, r8
 80038a8:	4638      	mov	r0, r7
 80038aa:	47c8      	blx	r9
 80038ac:	3001      	adds	r0, #1
 80038ae:	d103      	bne.n	80038b8 <_printf_common+0xac>
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b8:	3501      	adds	r5, #1
 80038ba:	e7c6      	b.n	800384a <_printf_common+0x3e>
 80038bc:	18e1      	adds	r1, r4, r3
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	2030      	movs	r0, #48	@ 0x30
 80038c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038c6:	4422      	add	r2, r4
 80038c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038d0:	3302      	adds	r3, #2
 80038d2:	e7c7      	b.n	8003864 <_printf_common+0x58>
 80038d4:	2301      	movs	r3, #1
 80038d6:	4622      	mov	r2, r4
 80038d8:	4641      	mov	r1, r8
 80038da:	4638      	mov	r0, r7
 80038dc:	47c8      	blx	r9
 80038de:	3001      	adds	r0, #1
 80038e0:	d0e6      	beq.n	80038b0 <_printf_common+0xa4>
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7d9      	b.n	800389a <_printf_common+0x8e>
	...

080038e8 <_printf_i>:
 80038e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	7e0f      	ldrb	r7, [r1, #24]
 80038ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038f0:	2f78      	cmp	r7, #120	@ 0x78
 80038f2:	4691      	mov	r9, r2
 80038f4:	4680      	mov	r8, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	469a      	mov	sl, r3
 80038fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038fe:	d807      	bhi.n	8003910 <_printf_i+0x28>
 8003900:	2f62      	cmp	r7, #98	@ 0x62
 8003902:	d80a      	bhi.n	800391a <_printf_i+0x32>
 8003904:	2f00      	cmp	r7, #0
 8003906:	f000 80d2 	beq.w	8003aae <_printf_i+0x1c6>
 800390a:	2f58      	cmp	r7, #88	@ 0x58
 800390c:	f000 80b9 	beq.w	8003a82 <_printf_i+0x19a>
 8003910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003918:	e03a      	b.n	8003990 <_printf_i+0xa8>
 800391a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800391e:	2b15      	cmp	r3, #21
 8003920:	d8f6      	bhi.n	8003910 <_printf_i+0x28>
 8003922:	a101      	add	r1, pc, #4	@ (adr r1, 8003928 <_printf_i+0x40>)
 8003924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003928:	08003981 	.word	0x08003981
 800392c:	08003995 	.word	0x08003995
 8003930:	08003911 	.word	0x08003911
 8003934:	08003911 	.word	0x08003911
 8003938:	08003911 	.word	0x08003911
 800393c:	08003911 	.word	0x08003911
 8003940:	08003995 	.word	0x08003995
 8003944:	08003911 	.word	0x08003911
 8003948:	08003911 	.word	0x08003911
 800394c:	08003911 	.word	0x08003911
 8003950:	08003911 	.word	0x08003911
 8003954:	08003a95 	.word	0x08003a95
 8003958:	080039bf 	.word	0x080039bf
 800395c:	08003a4f 	.word	0x08003a4f
 8003960:	08003911 	.word	0x08003911
 8003964:	08003911 	.word	0x08003911
 8003968:	08003ab7 	.word	0x08003ab7
 800396c:	08003911 	.word	0x08003911
 8003970:	080039bf 	.word	0x080039bf
 8003974:	08003911 	.word	0x08003911
 8003978:	08003911 	.word	0x08003911
 800397c:	08003a57 	.word	0x08003a57
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	1d1a      	adds	r2, r3, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6032      	str	r2, [r6, #0]
 8003988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800398c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003990:	2301      	movs	r3, #1
 8003992:	e09d      	b.n	8003ad0 <_printf_i+0x1e8>
 8003994:	6833      	ldr	r3, [r6, #0]
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	1d19      	adds	r1, r3, #4
 800399a:	6031      	str	r1, [r6, #0]
 800399c:	0606      	lsls	r6, r0, #24
 800399e:	d501      	bpl.n	80039a4 <_printf_i+0xbc>
 80039a0:	681d      	ldr	r5, [r3, #0]
 80039a2:	e003      	b.n	80039ac <_printf_i+0xc4>
 80039a4:	0645      	lsls	r5, r0, #25
 80039a6:	d5fb      	bpl.n	80039a0 <_printf_i+0xb8>
 80039a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039ac:	2d00      	cmp	r5, #0
 80039ae:	da03      	bge.n	80039b8 <_printf_i+0xd0>
 80039b0:	232d      	movs	r3, #45	@ 0x2d
 80039b2:	426d      	negs	r5, r5
 80039b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039b8:	4859      	ldr	r0, [pc, #356]	@ (8003b20 <_printf_i+0x238>)
 80039ba:	230a      	movs	r3, #10
 80039bc:	e011      	b.n	80039e2 <_printf_i+0xfa>
 80039be:	6821      	ldr	r1, [r4, #0]
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	0608      	lsls	r0, r1, #24
 80039c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039c8:	d402      	bmi.n	80039d0 <_printf_i+0xe8>
 80039ca:	0649      	lsls	r1, r1, #25
 80039cc:	bf48      	it	mi
 80039ce:	b2ad      	uxthmi	r5, r5
 80039d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039d2:	4853      	ldr	r0, [pc, #332]	@ (8003b20 <_printf_i+0x238>)
 80039d4:	6033      	str	r3, [r6, #0]
 80039d6:	bf14      	ite	ne
 80039d8:	230a      	movne	r3, #10
 80039da:	2308      	moveq	r3, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039e2:	6866      	ldr	r6, [r4, #4]
 80039e4:	60a6      	str	r6, [r4, #8]
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	bfa2      	ittt	ge
 80039ea:	6821      	ldrge	r1, [r4, #0]
 80039ec:	f021 0104 	bicge.w	r1, r1, #4
 80039f0:	6021      	strge	r1, [r4, #0]
 80039f2:	b90d      	cbnz	r5, 80039f8 <_printf_i+0x110>
 80039f4:	2e00      	cmp	r6, #0
 80039f6:	d04b      	beq.n	8003a90 <_printf_i+0x1a8>
 80039f8:	4616      	mov	r6, r2
 80039fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80039fe:	fb03 5711 	mls	r7, r3, r1, r5
 8003a02:	5dc7      	ldrb	r7, [r0, r7]
 8003a04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a08:	462f      	mov	r7, r5
 8003a0a:	42bb      	cmp	r3, r7
 8003a0c:	460d      	mov	r5, r1
 8003a0e:	d9f4      	bls.n	80039fa <_printf_i+0x112>
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d10b      	bne.n	8003a2c <_printf_i+0x144>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	07df      	lsls	r7, r3, #31
 8003a18:	d508      	bpl.n	8003a2c <_printf_i+0x144>
 8003a1a:	6923      	ldr	r3, [r4, #16]
 8003a1c:	6861      	ldr	r1, [r4, #4]
 8003a1e:	4299      	cmp	r1, r3
 8003a20:	bfde      	ittt	le
 8003a22:	2330      	movle	r3, #48	@ 0x30
 8003a24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a2c:	1b92      	subs	r2, r2, r6
 8003a2e:	6122      	str	r2, [r4, #16]
 8003a30:	f8cd a000 	str.w	sl, [sp]
 8003a34:	464b      	mov	r3, r9
 8003a36:	aa03      	add	r2, sp, #12
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f7ff fee6 	bl	800380c <_printf_common>
 8003a40:	3001      	adds	r0, #1
 8003a42:	d14a      	bne.n	8003ada <_printf_i+0x1f2>
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	b004      	add	sp, #16
 8003a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	4833      	ldr	r0, [pc, #204]	@ (8003b24 <_printf_i+0x23c>)
 8003a58:	2778      	movs	r7, #120	@ 0x78
 8003a5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	6831      	ldr	r1, [r6, #0]
 8003a62:	061f      	lsls	r7, r3, #24
 8003a64:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a68:	d402      	bmi.n	8003a70 <_printf_i+0x188>
 8003a6a:	065f      	lsls	r7, r3, #25
 8003a6c:	bf48      	it	mi
 8003a6e:	b2ad      	uxthmi	r5, r5
 8003a70:	6031      	str	r1, [r6, #0]
 8003a72:	07d9      	lsls	r1, r3, #31
 8003a74:	bf44      	itt	mi
 8003a76:	f043 0320 	orrmi.w	r3, r3, #32
 8003a7a:	6023      	strmi	r3, [r4, #0]
 8003a7c:	b11d      	cbz	r5, 8003a86 <_printf_i+0x19e>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	e7ac      	b.n	80039dc <_printf_i+0xf4>
 8003a82:	4827      	ldr	r0, [pc, #156]	@ (8003b20 <_printf_i+0x238>)
 8003a84:	e7e9      	b.n	8003a5a <_printf_i+0x172>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f023 0320 	bic.w	r3, r3, #32
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	e7f6      	b.n	8003a7e <_printf_i+0x196>
 8003a90:	4616      	mov	r6, r2
 8003a92:	e7bd      	b.n	8003a10 <_printf_i+0x128>
 8003a94:	6833      	ldr	r3, [r6, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	6961      	ldr	r1, [r4, #20]
 8003a9a:	1d18      	adds	r0, r3, #4
 8003a9c:	6030      	str	r0, [r6, #0]
 8003a9e:	062e      	lsls	r6, r5, #24
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	d501      	bpl.n	8003aa8 <_printf_i+0x1c0>
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <_printf_i+0x1c6>
 8003aa8:	0668      	lsls	r0, r5, #25
 8003aaa:	d5fb      	bpl.n	8003aa4 <_printf_i+0x1bc>
 8003aac:	8019      	strh	r1, [r3, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	4616      	mov	r6, r2
 8003ab4:	e7bc      	b.n	8003a30 <_printf_i+0x148>
 8003ab6:	6833      	ldr	r3, [r6, #0]
 8003ab8:	1d1a      	adds	r2, r3, #4
 8003aba:	6032      	str	r2, [r6, #0]
 8003abc:	681e      	ldr	r6, [r3, #0]
 8003abe:	6862      	ldr	r2, [r4, #4]
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7fc fba4 	bl	8000210 <memchr>
 8003ac8:	b108      	cbz	r0, 8003ace <_printf_i+0x1e6>
 8003aca:	1b80      	subs	r0, r0, r6
 8003acc:	6060      	str	r0, [r4, #4]
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ad8:	e7aa      	b.n	8003a30 <_printf_i+0x148>
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	4632      	mov	r2, r6
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	47d0      	blx	sl
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d0ad      	beq.n	8003a44 <_printf_i+0x15c>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	079b      	lsls	r3, r3, #30
 8003aec:	d413      	bmi.n	8003b16 <_printf_i+0x22e>
 8003aee:	68e0      	ldr	r0, [r4, #12]
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	4298      	cmp	r0, r3
 8003af4:	bfb8      	it	lt
 8003af6:	4618      	movlt	r0, r3
 8003af8:	e7a6      	b.n	8003a48 <_printf_i+0x160>
 8003afa:	2301      	movs	r3, #1
 8003afc:	4632      	mov	r2, r6
 8003afe:	4649      	mov	r1, r9
 8003b00:	4640      	mov	r0, r8
 8003b02:	47d0      	blx	sl
 8003b04:	3001      	adds	r0, #1
 8003b06:	d09d      	beq.n	8003a44 <_printf_i+0x15c>
 8003b08:	3501      	adds	r5, #1
 8003b0a:	68e3      	ldr	r3, [r4, #12]
 8003b0c:	9903      	ldr	r1, [sp, #12]
 8003b0e:	1a5b      	subs	r3, r3, r1
 8003b10:	42ab      	cmp	r3, r5
 8003b12:	dcf2      	bgt.n	8003afa <_printf_i+0x212>
 8003b14:	e7eb      	b.n	8003aee <_printf_i+0x206>
 8003b16:	2500      	movs	r5, #0
 8003b18:	f104 0619 	add.w	r6, r4, #25
 8003b1c:	e7f5      	b.n	8003b0a <_printf_i+0x222>
 8003b1e:	bf00      	nop
 8003b20:	08003d42 	.word	0x08003d42
 8003b24:	08003d53 	.word	0x08003d53

08003b28 <memmove>:
 8003b28:	4288      	cmp	r0, r1
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	eb01 0402 	add.w	r4, r1, r2
 8003b30:	d902      	bls.n	8003b38 <memmove+0x10>
 8003b32:	4284      	cmp	r4, r0
 8003b34:	4623      	mov	r3, r4
 8003b36:	d807      	bhi.n	8003b48 <memmove+0x20>
 8003b38:	1e43      	subs	r3, r0, #1
 8003b3a:	42a1      	cmp	r1, r4
 8003b3c:	d008      	beq.n	8003b50 <memmove+0x28>
 8003b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b46:	e7f8      	b.n	8003b3a <memmove+0x12>
 8003b48:	4402      	add	r2, r0
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	428a      	cmp	r2, r1
 8003b4e:	d100      	bne.n	8003b52 <memmove+0x2a>
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b5a:	e7f7      	b.n	8003b4c <memmove+0x24>

08003b5c <_sbrk_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4d06      	ldr	r5, [pc, #24]	@ (8003b78 <_sbrk_r+0x1c>)
 8003b60:	2300      	movs	r3, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	f7fd f886 	bl	8000c78 <_sbrk>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_sbrk_r+0x1a>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_sbrk_r+0x1a>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	200002dc 	.word	0x200002dc

08003b7c <memcpy>:
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b84:	d100      	bne.n	8003b88 <memcpy+0xc>
 8003b86:	4770      	bx	lr
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b92:	4291      	cmp	r1, r2
 8003b94:	d1f9      	bne.n	8003b8a <memcpy+0xe>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <_realloc_r>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4615      	mov	r5, r2
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	b921      	cbnz	r1, 8003bae <_realloc_r+0x16>
 8003ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	4611      	mov	r1, r2
 8003baa:	f7ff bc4b 	b.w	8003444 <_malloc_r>
 8003bae:	b92a      	cbnz	r2, 8003bbc <_realloc_r+0x24>
 8003bb0:	f7ff fbdc 	bl	800336c <_free_r>
 8003bb4:	2400      	movs	r4, #0
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bbc:	f000 f81a 	bl	8003bf4 <_malloc_usable_size_r>
 8003bc0:	4285      	cmp	r5, r0
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	d802      	bhi.n	8003bcc <_realloc_r+0x34>
 8003bc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003bca:	d8f4      	bhi.n	8003bb6 <_realloc_r+0x1e>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f7ff fc38 	bl	8003444 <_malloc_r>
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0ec      	beq.n	8003bb4 <_realloc_r+0x1c>
 8003bda:	42b5      	cmp	r5, r6
 8003bdc:	462a      	mov	r2, r5
 8003bde:	4621      	mov	r1, r4
 8003be0:	bf28      	it	cs
 8003be2:	4632      	movcs	r2, r6
 8003be4:	f7ff ffca 	bl	8003b7c <memcpy>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fbbe 	bl	800336c <_free_r>
 8003bf0:	463c      	mov	r4, r7
 8003bf2:	e7e0      	b.n	8003bb6 <_realloc_r+0x1e>

08003bf4 <_malloc_usable_size_r>:
 8003bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf8:	1f18      	subs	r0, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfbc      	itt	lt
 8003bfe:	580b      	ldrlt	r3, [r1, r0]
 8003c00:	18c0      	addlt	r0, r0, r3
 8003c02:	4770      	bx	lr

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
